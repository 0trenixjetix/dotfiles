;; -*- mode: Emacs-Lisp; syntax: elisp -*-
;;     Time-stamp: <Sep 03 2015>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IME setting for japanese environment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set-keyboard-coding-system 'japanese-shift-jis)
;; (set-keyboard-coding-system 'utf-8)
(setq default-input-method "W32-IME")
(w32-ime-initialize)
(setq ime-enable-document-feed nil)

;; ;; UTF-8⇔Legacy Encoding (EUC-JP や Shift_JIS など)をWindowsで変換
;; ;;  http://nijino.homelinux.net/emacs/emacs23-ja.html
;; (coding-system-put 'euc-jp :encode-translation-table
;;                    (get 'japanese-ucs-cp932-to-jis-map 'translation-table))
;; (coding-system-put 'iso-2022-jp :encode-translation-table
;;                    (get 'japanese-ucs-cp932-to-jis-map 'translation-table))
;; (coding-system-put 'cp932 :encode-translation-table
;;                    (get 'japanese-ucs-jis-to-cp932-map 'translation-table))
;; ;; charset と coding-system の優先度設定
;; (set-charset-priority 'ascii 'japanese-jisx0208 'latin-jisx0201
;;                       'katakana-jisx0201 'iso-8859-1 'cp1252 'unicode)
;; (set-coding-system-priority 'utf-8 'euc-jp 'iso-2022-jp 'cp932)
;; ;; East Asian Ambiguous
;; (defun set-east-asian-ambiguous-width (width)
;;   (while (char-table-parent char-width-table)
;;     (setq char-width-table (char-table-parent char-width-table)))
;;   (let ((table (make-char-table nil)))
;;     (dolist (range
;;              '(#x00A1 #x00A4 (#x00A7 . #x00A8) #x00AA (#x00AD . #x00AE)
;;                       (#x00B0 . #x00B4) (#x00B6 . #x00BA) (#x00BC . #x00BF)
;;                       #x00C6 #x00D0 (#x00D7 . #x00D8) (#x00DE . #x00E1) #x00E6
;;                       (#x00E8 . #x00EA) (#x00EC . #x00ED) #x00F0 
;;                       (#x00F2 . #x00F3) (#x00F7 . #x00FA) #x00FC #x00FE
;;                       #x0101 #x0111 #x0113 #x011B (#x0126 . #x0127) #x012B
;;                       (#x0131 . #x0133) #x0138 (#x013F . #x0142) #x0144
;;                       (#x0148 . #x014B) #x014D (#x0152 . #x0153)
;;                       (#x0166 . #x0167) #x016B #x01CE #x01D0 #x01D2 #x01D4
;;                       #x01D6 #x01D8 #x01DA #x01DC #x0251 #x0261 #x02C4 #x02C7
;;                       (#x02C9 . #x02CB) #x02CD #x02D0 (#x02D8 . #x02DB) #x02DD
;;                       #x02DF (#x0300 . #x036F) (#x0391 . #x03A9)
;;                       (#x03B1 . #x03C1) (#x03C3 . #x03C9) #x0401 
;;                       (#x0410 . #x044F) #x0451 #x2010 (#x2013 . #x2016)
;;                       (#x2018 . #x2019) (#x201C . #x201D) (#x2020 . #x2022)
;;                       (#x2024 . #x2027) #x2030 (#x2032 . #x2033) #x2035 #x203B
;;                       #x203E #x2074 #x207F (#x2081 . #x2084) #x20AC #x2103
;;                       #x2105 #x2109 #x2113 #x2116 (#x2121 . #x2122) #x2126
;;                       #x212B (#x2153 . #x2154) (#x215B . #x215E) 
;;                       (#x2160 . #x216B) (#x2170 . #x2179) (#x2190 . #x2199)
;;                       (#x21B8 . #x21B9) #x21D2 #x21D4 #x21E7 #x2200
;;                       (#x2202 . #x2203) (#x2207 . #x2208) #x220B #x220F #x2211
;;                       #x2215 #x221A (#x221D . #x2220) #x2223 #x2225
;;                       (#x2227 . #x222C) #x222E (#x2234 . #x2237)
;;                       (#x223C . #x223D) #x2248 #x224C #x2252 (#x2260 . #x2261)
;;                       (#x2264 . #x2267) (#x226A . #x226B) (#x226E . #x226F)
;;                       (#x2282 . #x2283) (#x2286 . #x2287) #x2295 #x2299 #x22A5
;;                       #x22BF #x2312 (#x2460 . #x24E9) (#x24EB . #x254B)
;;                       (#x2550 . #x2573) (#x2580 . #x258F) (#x2592 . #x2595) 
;;                       (#x25A0 . #x25A1) (#x25A3 . #x25A9) (#x25B2 . #x25B3)
;;                       (#x25B6 . #x25B7) (#x25BC . #x25BD) (#x25C0 . #x25C1)
;;                       (#x25C6 . #x25C8) #x25CB (#x25CE . #x25D1) 
;;                       (#x25E2 . #x25E5) #x25EF (#x2605 . #x2606) #x2609
;;                       (#x260E . #x260F) (#x2614 . #x2615) #x261C #x261E #x2640
;;                       #x2642 (#x2660 . #x2661) (#x2663 . #x2665) 
;;                       (#x2667 . #x266A) (#x266C . #x266D) #x266F #x273D
;;                       (#x2776 . #x277F) (#xE000 . #xF8FF) (#xFE00 . #xFE0F) 
;;                       #xFFFD
;;                       ))
;;       (set-char-table-range table range width))
;;     (optimize-char-table table)
;;     (set-char-table-parent table char-width-table)
;;     (setq char-width-table table)))
;; (set-east-asian-ambiguous-width 2)

;; Encoding
;; (set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-file-name-coding-system 'shift_jis)
(modify-coding-system-alist 'file "\\.java\\'" 'utf-8)              ; Java
(modify-coding-system-alist 'file "\\.py\\'" 'utf-8)                ; Python
(modify-coding-system-alist 'file "\\.c\\'" 'utf-8)                ; c
(modify-coding-system-alist 'file "\\.cpp\\'" 'utf-8)                ; c++
                                        ;(prefer-coding-system 'utf-8)
;; (setq coding-system-for-read 'utf-8)
;; (setq coding-system-for-write 'utf-8)
;; shell mode では shift_jis にする
;; (add-hook 'shell-mode-hook '(lambda ()
;; (set-buffer-process-coding-system 'sjis 'sjis)))


;; Disable IME on yes/no query
(wrap-function-to-control-ime 'universal-argument t nil)
(wrap-function-to-control-ime 'read-string nil nil)
(wrap-function-to-control-ime 'read-char nil nil)
(wrap-function-to-control-ime 'read-from-minibuffer nil nil)
(wrap-function-to-control-ime 'y-or-n-p nil nil)
(wrap-function-to-control-ime 'yes-or-no-p nil nil)
(wrap-function-to-control-ime 'map-y-or-n-p nil nil)


;; Support incremental search in Japanese
(defun w32-isearch-update ()
  (interactive)
  (isearch-update))
(define-key isearch-mode-map [compend] 'w32-isearch-update)
(define-key isearch-mode-map "\C-o" 'isearch-toggle-input-method)
(add-hook 'isearch-mode-hook
          (lambda () (setq w32-ime-composition-window (minibuffer-window))))
(add-hook 'isearch-mode-end-hook
          (lambda () (setq w32-ime-composition-window nil)))

;; dabbrev for japanese
(setq case-replace nil)             ;dabbrev exact (upper or lower)case
(setq dabbrev-case-fold-search nil) ;dabbrev exact case
                                        ;(load "dabbrev-ja")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; region color
(global-font-lock-mode t)  ; enalbe global-font-lock-moe
(transient-mark-mode t)    ; enable region color

(defvar dark_BG "#2d3743")
(defvar dark_FG "gray90")
(defvar myCursorColor "VioletRed")
;; (defface modeline
;;   '((t (:inherit mode-line)))
;;   "alias for mode-line.")
;; set other default-frame-alist
(if window-system
    (progn
      ;; Foreground color
      (add-to-list 'default-frame-alist `(foreground-color . ,dark_FG))
      ;; Background color
      (add-to-list 'default-frame-alist `(background-color . ,dark_BG))
      ;; Cursor color
      (add-to-list 'default-frame-alist `(cursor-color . ,myCursorColor))
      (add-to-list 'default-frame-alist '(cursor-type  . '(bar . 3)))
      ;; Mouse pointer color
      (add-to-list 'default-frame-alist '(mouse-color . "white"))
      ;; Symbol sizse in fringe
      (add-to-list 'default-frame-alist '(left-fringe . 14))
      (add-to-list 'default-frame-alist '(right-fringe . 14))))

;; Default transparency
(add-to-list 'default-frame-alist '(alpha . (90 40)))

;; Inhibit memubar, scrollbar
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Cursor
(setq blink-cursor-delay 1.0)
(setq blink-cursor-interval 0.75)
(blink-cursor-mode 1)
(setq-default cursor-in-non-selected-windows nil)

;; Trancation lines
(setq truncate-lines nil)
(setq truncate-partial-width-windows nil)

;; Emphasize corresponding parenthesis
(show-paren-mode t)

;; Show end of buffer in fringe
(setq-default indicate-buffer-boundaries 'left)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Behavior configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hide password in shell-mode
(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)

;; tab width
(setq-default tab-width 4)
(setq tab-stop-list '(4 8 12))
;; Use whitespace instead of tab
(setq-default indent-tabs-mode nil)

;; Inhibit startup screen
(setq inhibit-startup-message t)
;; Emacs starts on buffer menu
(buffer-menu)

;; tmp file saving directory
(setq auto-save-default nil)
;; (setq auto-save-list-file-prefix "~/.emacs.d/backup")

;; backup.file~ location
(setq make-backup-files nil)
;; (setq backup-directory-alist
;;       (cons (cons "\\.*$" (expand-file-name "~/.emacs.d/backup"))
;;             backup-directory-alist))

;; Remove attributes from text in kill-ring
(defadvice kill-new (around my-kill-ring-disable-text-property activate)
  (let ((new (ad-get-arg 0)))
    (set-text-properties 0 (length new) nil new)
    ad-do-it))

;; Don't omit argument for elisp (?)
(setq eval-expression-print-level nil)
(setq eval-expression-print-length nil)

;; Resurrect cursor point
(require 'saveplace)
(setq-default save-place t)

;; Automatically reload updated file
(global-auto-revert-mode 1)
;; ;; Reload file under version control system
;; (setq auto-revert-check-vc-info t)

;; auto-insert LAST-MODIFIED-DATE
(if (not (memq 'time-stamp write-file-hooks))
    (setq write-file-hooks
          (cons 'time-stamp write-file-hooks)))
(setq time-stamp-line-limit 40)
(setq time-stamp-format "%3b %02d %:y")
(setq system-time-locale "C")

;; Beep
(setq visible-bell nil)

;; Diff
(setq diff-switches "-u")

;; Enable CUA mode
(cua-mode t)
(setq cua-enable-cua-keys nil)
;; Set key
(define-key global-map (kbd "C-x SPC") 'cua-set-rectangle-mark)

(setq dabbrev-ignored-buffer-names '("*Messages*"))

;; Scrolling
(setq scroll-conservatively 35
      scroll-margin 3
      ;; scroll-step 1
      )
(setq comint-scroll-show-maximum-output t) ;; for shell-mode

;; Visual line mode
(global-visual-line-mode 1)
(custom-set-variables '(visual-line-fringe-indicators '(t t)))

;; Enable of overwrite and deletion of selected region
(delete-selection-mode 1)

;; Maximum number of items for recentf
(setq recentf-max-saved-items 200)

;; Make connection speed with external program faster
(setq w32-pipe-read-delay 0)

;; Don't indent automatically
(electric-indent-mode -1)

;; Enable narrowing
;;(put 'narrow-to-page 'disabled nil)
;;(put 'narrow-to-region 'disabled nil)

;; Load newer file of .el or .elc
(setq load-prefer-newer t)

;; Do NOT show message in scratch buffer
(setq initial-scratch-message nil)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auto mode
(add-to-list 'auto-mode-alist '("\\.c\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.pl\\'" . perl-mode))
(add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Set key and alias
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key "\C-h" 'backward-delete-char) ; C-h as BackSpace
(global-set-key "\M-?" 'help-for-help)        ; M-? as help
;;(global-set-key "\C-q" 'quoted-insert)      ; C-q original
(define-key isearch-mode-map "\C-h" 'isearch-delete-char) ;; enable \C-h in isearch mode
;;; C-q をプリフィックスキー化
(define-key global-map "\C-q" (make-sparse-keymap))
(global-set-key "\C-q\C-q" 'quoted-insert) ; assign quoted-insert to C-q C-q

;; Kill emacs with M-x exit
(defalias 'exit 'save-buffers-kill-emacs)
(global-unset-key (kbd "C-x C-c"))

;; Reload configuration
(defalias 'reload-emacs '(lambda() (interactive) (load-file "~/.emacs")))

;; Change encoding
(defalias 'change-encoding 'set-buffer-file-coding-system)
;; Change encoding and reload buffer
(defalias 'reload-with-different-encoding 'revert-buffer-with-coding-system)

;; Zoom and zoom-out
(defalias 'zoom-in '(lambda() "`text-scale-adjust' can reset face to global default." (interactive) (text-scale-increase +1)))
(defalias 'zoom-out '(lambda() "`text-scale-adjust' can reset face to global default." (interactive) (text-scale-decrease +1)))

;; Toggle input method
(global-set-key "\C-o" 'toggle-input-method)  ; original C-o was open-line
(global-set-key (kbd "\C-x o") 'open-line) ; assing C-x o to open-line

;; Repeated strike on ESC to escape
(global-set-key (kbd "M-ESC ESC") 'keyboard-quit)

;; Make goto-line accessible
(global-set-key (kbd "M-g") 'goto-line) ; some keybinds go off

;; Cursor move in window
(global-set-key (kbd "C-M-h") (lambda () (interactive) (move-to-window-line 0)))
(global-set-key (kbd "C-M-m") (lambda () (interactive) (move-to-window-line nil)))
(global-set-key (kbd "C-M-l") (lambda () (interactive) (move-to-window-line -1)))

;; C-M-d to kill-visual-line
(global-set-key (kbd "C-M-d") 'kill-visual-line)
;; Kill whole line with C-k
(global-set-key (kbd "C-k") 'kill-whole-line)

;; Window move
(global-set-key "\C-ql" 'windmove-right)
(global-set-key "\C-qh" 'windmove-left)
(global-set-key "\C-qj" 'windmove-down)
(global-set-key "\C-qk" 'windmove-up)
;; Change prefix-key for window operation from C-x to C-q
(global-set-key (kbd "C-q o") 'other-window)
(global-set-key (kbd "C-q 0") 'delete-window)
(global-set-key (kbd "C-q 1") 'delete-other-windows)
(global-set-key (kbd "C-q 2") 'split-window-below)
(global-set-key (kbd "C-q 3") 'split-window-right)
(define-key global-map (kbd "C-q 4") ctl-x-4-map)
(define-key global-map (kbd "C-q 5") ctl-x-5-map)

;; Cycle spacing
(global-set-key (kbd "S-SPC") 'cycle-spacing)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load configuration mainly for built-in feature
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load (concat user-emacs-directory "config/builtins"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load configuration mainly for non built-in feature
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load (concat user-emacs-directory "config/packages"))


;; Local Variables:
;; coding: utf-8
;; End:
